{"version":3,"sources":["meteor://ğŸ’»app/imports/api/tasks.js","meteor://ğŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAM,wBAAQ,IAAI,aAAM,UAAN,CAAiB,OAArB,CAAR;;AAEb,IAAG,eAAO,QAAP,EAAiB;AAClB,iBAAO,OAAP,CAAe,OAAf;AAAwB,aAAS,gBAAT,GAA2B;AACjD,aAAO,MAAM,IAAN,CAAW;AAChB,aAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAL,EAAX,EADC,EAEH,EAAE,OAAO,KAAK,MAAL,EAFN,CAAL;OADK,CAAP,CADiD;KAA3B;;WAAS;KAAjC,EADkB;CAApB;;AAWA,eAAO,OAAP,CAAe;AACb;yBAAe,MAAM;AACnB,wBAAM,IAAN,EAAY,MAAZ,EADmB;;AAGnB,UAAG,CAAE,KAAK,MAAL,EAAa;AAChB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADgB;OAAlB;AAGA,YAAM,MAAN,CAAa;AACX,kBADW;AAEX,mBAAW,IAAI,IAAJ,EAAX;AACA,eAAO,KAAK,MAAL;AACP,kBAAU,eAAO,KAAP,CAAa,OAAb,CAAqB,KAAK,MAAL,CAArB,CAAkC,QAAlC;OAJZ,EANmB;;;;KADR;AAcb;yBAAe,QAAQ;AACrB,wBAAM,MAAN,EAAc,MAAd,EADqB;;AAGrB,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAHe;AAIrB,UAAG,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAL,EAAa;AAC7C,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CAD6C;OAA/C;;AAIA,YAAM,MAAN,CAAa,MAAb,EARqB;;;;KAdV;AAwBb;6BAAmB,QAAQ,YAAY;AACrC,wBAAM,MAAN,EAAc,MAAd,EADqC;AAErC,wBAAM,UAAN,EAAkB,OAAlB,EAFqC;;AAIrC,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAJ+B;AAKrC,UAAG,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAL,EAAa;AAC7C,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CAD6C;OAA/C;;AAIA,YAAM,MAAN,CAAa,MAAb,EAAqB;AACnB,cAAM,EAAE,SAAS,UAAT,EAAR;OADF,EATqC;;;;KAxB1B;AAqCb;6BAAmB,QAAQ,cAAc;AACvC,wBAAM,MAAN,EAAc,MAAd,EADuC;AAEvC,wBAAM,YAAN,EAAoB,OAApB,EAFuC;;AAIvC,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAJiC;AAKvC,UAAG,KAAK,KAAL,KAAe,KAAK,MAAL,EAAa;AAC7B,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CAD6B;OAA/B;AAGA,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,WAAS,YAAT,EAAR,EAAvB,EARuC;;;;KArC5B;CAAf,sE;;;;;;;;;;;ACjBA;;AAEA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf,qE","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif(Meteor.isServer) {\n  Meteor.publish(\"tasks\", function tasksPublication(){\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId }\n      ]\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n\n    if(! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if(task.private && task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if(task.private && task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: { checked: setChecked },\n    });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if(task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  }\n});\n","import { Meteor } from 'meteor/meteor';\n\nimport '../imports/api/tasks.js';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}